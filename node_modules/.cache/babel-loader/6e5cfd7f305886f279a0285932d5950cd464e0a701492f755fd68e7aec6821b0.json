{"ast":null,"code":"var _jsxFileName = \"/Users/josemigarcia/weather-app/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState('');\n  const setBackground = (weatherType, weatherDescription, iconCode) => {\n    const body = document.querySelector(\"body\");\n    const isNight = iconCode.includes(\"n\");\n    if (weatherType === \"Clouds\" && weatherDescription === \"few clouds\") {\n      body.style.backgroundImage = isNight ? \"url('/images/fewclouds-night.jpg')\" : \"url('/images/fewclouds.jpg')\";\n    } else {\n      switch (weatherType) {\n        case \"Clear\":\n          body.style.backgroundImage = isNight ? \"url('/images/clear-sky-night.jpg')\" : \"url('/images/clear-sky.jpg')\";\n          break;\n        case \"Rain\":\n          body.style.backgroundImage = isNight ? \"url('/images/rain-night.jpg')\" : \"url('/images/rain.jpg')\";\n          break;\n        case \"Clouds\":\n          body.style.backgroundImage = isNight ? \"url('/images/cloudy-night.jpg')\" : \"url('/images/cloudy.jpg')\";\n          break;\n        case \"Snow\":\n          body.style.backgroundImage = isNight ? \"url('/images/snow-night.jpg')\" : \"url('/images/snow.jpg')\";\n          break;\n        case \"Thunderstorm\":\n          body.style.backgroundImage = isNight ? \"url('/images/thunderstorm-night.jpg')\" : \"url('/images/thunderstorm.jpg')\";\n          break;\n        case \"Drizzle\":\n          body.style.backgroundImage = isNight ? \"url('/images/drizzle-night.jpg')\" : \"url('/images/drizzle.jpg')\";\n          break;\n        default:\n          body.style.backgroundImage = \"url('/images/default.jpg')\";\n      }\n    }\n    body.style.backgroundSize = \"cover\";\n    body.style.backgroundPosition = \"center center\";\n  };\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async position => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n        const weatherRes = await axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);\n        setWeather(weatherRes.data);\n        const weatherType = weatherRes.data.weather[0].main;\n        const weatherDescription = weatherRes.data.weather[0].description;\n        const iconCode = weatherRes.data.weather[0].icon;\n        setBackground(weatherType, weatherDescription, iconCode);\n        const forecastRes = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);\n        const forecastData = forecastRes.data.list;\n        const groupedForecast = forecastData.reduce((acc, curr) => {\n          const date = curr.dt_txt.split(' ')[0];\n          if (!acc[date]) {\n            acc[date] = {\n              tempSum: 0,\n              count: 0,\n              weather: curr.weather[0].description,\n              icon: curr.weather[0].icon\n            };\n          }\n          acc[date].tempSum += curr.main.temp;\n          acc[date].count += 1;\n          return acc;\n        }, {});\n        const forecastArray = Object.keys(groupedForecast).map(date => {\n          const day = groupedForecast[date];\n          return {\n            date,\n            tempAvg: (day.tempSum / day.count).toFixed(1),\n            description: day.weather,\n            icon: day.icon\n          };\n        });\n        setForecast(forecastArray);\n      }, () => {\n        setError('Could not get location');\n      });\n    } else {\n      setError('Geolocation not available');\n    }\n  };\n  const fetchWeather = async () => {\n    if (city) {\n      try {\n        setError('');\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n        const weatherRes = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`);\n        setWeather(weatherRes.data);\n        const weatherType = weatherRes.data.weather[0].main;\n        const weatherDescription = weatherRes.data.weather[0].description;\n        const iconCode = weatherRes.data.weather[0].icon;\n        setBackground(weatherType, weatherDescription, iconCode);\n        const forecastRes = await axios.get(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`);\n        const forecastData = forecastRes.data.list;\n        const groupedForecast = forecastData.reduce((acc, curr) => {\n          const date = curr.dt_txt.split(' ')[0];\n          if (!acc[date]) {\n            acc[date] = {\n              tempSum: 0,\n              count: 0,\n              weather: curr.weather[0].description,\n              icon: curr.weather[0].icon\n            };\n          }\n          acc[date].tempSum += curr.main.temp;\n          acc[date].count += 1;\n          return acc;\n        }, {});\n        const forecastArray = Object.keys(groupedForecast).map(date => {\n          const day = groupedForecast[date];\n          return {\n            date,\n            tempAvg: (day.tempSum / day.count).toFixed(1),\n            description: day.weather,\n            icon: day.icon\n          };\n        });\n        setForecast(forecastArray);\n      } catch (err) {\n        setWeather(null);\n        setForecast(null);\n        setError('City not found or API error');\n      }\n    } else {\n      getLocation();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: city,\n      placeholder: \"City...\",\n      onChange: e => setCity(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchWeather,\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"weather-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: weather.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: weather.weather[0].main\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Temperature: \", weather.main.temp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Humidity: \", weather.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Wind: \", weather.wind.speed, \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: `https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`,\n        alt: \"icono clima\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }, this), forecast && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forecast\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"5-day forecast:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"forecast-list\",\n        children: forecast.map((forecastItem, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forecast-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: new Date(forecastItem.date).toLocaleDateString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [forecastItem.tempAvg, \"\\xB0C\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: forecastItem.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `https://openweathermap.org/img/wn/${forecastItem.icon}@2x.png`,\n            alt: \"icono clima\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+oc/yVMrRoogOy1GYe8GYsDjrNA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","city","setCity","weather","setWeather","forecast","setForecast","error","setError","setBackground","weatherType","weatherDescription","iconCode","body","document","querySelector","isNight","includes","style","backgroundImage","backgroundSize","backgroundPosition","getLocation","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lon","longitude","apiKey","process","env","REACT_APP_WEATHER_API_KEY","weatherRes","get","data","main","description","icon","forecastRes","forecastData","list","groupedForecast","reduce","acc","curr","date","dt_txt","split","tempSum","count","temp","forecastArray","Object","keys","map","day","tempAvg","toFixed","fetchWeather","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","placeholder","onChange","e","target","onClick","color","name","humidity","wind","speed","src","alt","forecastItem","index","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["/Users/josemigarcia/weather-app/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState(null);\n  const [forecast, setForecast] = useState(null);\n  const [error, setError] = useState('');\n\n  const setBackground = (weatherType, weatherDescription, iconCode) => {\n    const body = document.querySelector(\"body\");\n    const isNight = iconCode.includes(\"n\");\n\n    if (weatherType === \"Clouds\" && weatherDescription === \"few clouds\") {\n      body.style.backgroundImage = isNight\n        ? \"url('/images/fewclouds-night.jpg')\"\n        : \"url('/images/fewclouds.jpg')\";\n    } else {\n      switch (weatherType) {\n        case \"Clear\":\n          body.style.backgroundImage = isNight\n            ? \"url('/images/clear-sky-night.jpg')\"\n            : \"url('/images/clear-sky.jpg')\";\n          break;\n        case \"Rain\":\n          body.style.backgroundImage = isNight\n            ? \"url('/images/rain-night.jpg')\"\n            : \"url('/images/rain.jpg')\";\n          break;\n        case \"Clouds\":\n          body.style.backgroundImage = isNight\n            ? \"url('/images/cloudy-night.jpg')\"\n            : \"url('/images/cloudy.jpg')\";\n          break;\n        case \"Snow\":\n          body.style.backgroundImage = isNight\n            ? \"url('/images/snow-night.jpg')\"\n            : \"url('/images/snow.jpg')\";\n          break;\n        case \"Thunderstorm\":\n          body.style.backgroundImage = isNight\n            ? \"url('/images/thunderstorm-night.jpg')\"\n            : \"url('/images/thunderstorm.jpg')\";\n          break;\n        case \"Drizzle\":\n          body.style.backgroundImage = isNight\n            ? \"url('/images/drizzle-night.jpg')\"\n            : \"url('/images/drizzle.jpg')\";\n          break;\n        default:\n          body.style.backgroundImage = \"url('/images/default.jpg')\";\n      }\n    }\n\n    body.style.backgroundSize = \"cover\";\n    body.style.backgroundPosition = \"center center\";\n  };\n\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(async (position) => {\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n        const weatherRes = await axios.get(\n          `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n        );\n        setWeather(weatherRes.data);\n\n        const weatherType = weatherRes.data.weather[0].main;\n        const weatherDescription = weatherRes.data.weather[0].description;\n        const iconCode = weatherRes.data.weather[0].icon;\n        setBackground(weatherType, weatherDescription, iconCode);\n\n        const forecastRes = await axios.get(\n          `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`\n        );\n\n        const forecastData = forecastRes.data.list;\n\n        const groupedForecast = forecastData.reduce((acc, curr) => {\n          const date = curr.dt_txt.split(' ')[0];\n          if (!acc[date]) {\n            acc[date] = {\n              tempSum: 0,\n              count: 0,\n              weather: curr.weather[0].description,\n              icon: curr.weather[0].icon\n            };\n          }\n          acc[date].tempSum += curr.main.temp;\n          acc[date].count += 1;\n          return acc;\n        }, {});\n\n        const forecastArray = Object.keys(groupedForecast).map((date) => {\n          const day = groupedForecast[date];\n          return {\n            date,\n            tempAvg: (day.tempSum / day.count).toFixed(1),\n            description: day.weather,\n            icon: day.icon\n          };\n        });\n\n        setForecast(forecastArray);\n\n      }, () => {\n        setError('Could not get location');\n      });\n    } else {\n      setError('Geolocation not available');\n    }\n  };\n\n  const fetchWeather = async () => {\n    if (city) {\n      try {\n        setError('');\n        const apiKey = process.env.REACT_APP_WEATHER_API_KEY;\n\n        const weatherRes = await axios.get(\n          `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`\n        );\n        setWeather(weatherRes.data);\n\n        const weatherType = weatherRes.data.weather[0].main;\n        const weatherDescription = weatherRes.data.weather[0].description;\n        const iconCode = weatherRes.data.weather[0].icon;\n        setBackground(weatherType, weatherDescription, iconCode);\n\n        const forecastRes = await axios.get(\n          `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`\n        );\n\n        const forecastData = forecastRes.data.list;\n\n        const groupedForecast = forecastData.reduce((acc, curr) => {\n          const date = curr.dt_txt.split(' ')[0];\n          if (!acc[date]) {\n            acc[date] = {\n              tempSum: 0,\n              count: 0,\n              weather: curr.weather[0].description,\n              icon: curr.weather[0].icon\n            };\n          }\n          acc[date].tempSum += curr.main.temp;\n          acc[date].count += 1;\n          return acc;\n        }, {});\n\n        const forecastArray = Object.keys(groupedForecast).map((date) => {\n          const day = groupedForecast[date];\n          return {\n            date,\n            tempAvg: (day.tempSum / day.count).toFixed(1),\n            description: day.weather,\n            icon: day.icon\n          };\n        });\n\n        setForecast(forecastArray);\n      } catch (err) {\n        setWeather(null);\n        setForecast(null);\n        setError('City not found or API error');\n      }\n    } else {\n      getLocation();\n    }\n  };\n\n  return (\n    <div className=\"app\">\n      <h1>Weather App</h1>\n      <input\n        type=\"text\"\n        value={city}\n        placeholder=\"City...\"\n        onChange={(e) => setCity(e.target.value)}\n      />\n      <button onClick={fetchWeather}>Search</button>\n\n      {error && <p style={{ color: 'red' }}>{error}</p>}\n\n      {weather && (\n        <div className=\"weather-box\">\n          <h2>{weather.name}</h2>\n          <p>{weather.weather[0].main}</p>\n          <p>Temperature: {weather.main.temp}°C</p>\n          <p>Humidity: {weather.main.humidity}%</p>\n          <p>Wind: {weather.wind.speed} m/s</p>\n          <img\n            src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n            alt=\"icono clima\"\n          />\n        </div>\n      )}\n\n      {forecast && (\n        <div className=\"forecast\">\n          <h3>5-day forecast:</h3>\n          <div className=\"forecast-list\">\n            {forecast.map((forecastItem, index) => (\n              <div key={index} className=\"forecast-item\">\n                <p>{new Date(forecastItem.date).toLocaleDateString()}</p>\n                <p>{forecastItem.tempAvg}°C</p>\n                <p>{forecastItem.description}</p>\n                <img\n                  src={`https://openweathermap.org/img/wn/${forecastItem.icon}@2x.png`}\n                  alt=\"icono clima\"\n                />\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}